Group {
 name fxT_disableNodes
 inputs 0
 gl_color 0x990000ff
 label "<center><img src=\"fxT_disableNodes.png\">"
 note_font Verdana
 note_font_size 13
 lock_connections true
 addUserKnob {20 fxT_disableNodes}
 addUserKnob {26 NodeInfo l "" +STARTLINE T "<font color='#838383'>\nThis is a tool for having the nuke-script run faster when working,<br />\nby temporarily disabling heavy nodes.<br />\nYou can also set a temporary value for the scanline-sample knobs.<br/ ><br /><br /></font>\n\n<font color ='red'>\n<b>Remeber to disable before rendering. </b>\n</font>"}
 addUserKnob {26 divline0 l "" +STARTLINE}
 addUserKnob {20 HowToInfo l "How-To Info" t "Unfold this group to read more info about how to use this tool." n 1}
 HowToInfo 0
 addUserKnob {26 divline00 l "" +STARTLINE}
 addUserKnob {26 Info l "" t "How To Info" +STARTLINE T "<font color ='#838383'>\n1) Click the buttons to select the node types you want to affect.<br /><br />\n\n2) Click the 'Link Selected Nodes'-button.<br /><br />\n\n3) Click the 'Enable / Disable Nodes' button, to enable or disable the linked nodes.<br /><br />\n\n4)Click the 'Unlink Nodes' button to unlink all nodes, (PS: this will also enable them)<br /><br />\n\n* If the nodes you wish to affect is not listed, you can manually select any nodes,<br /> then click the 'Link Selected Nodes' button. <br /><br />\n\n5) To set temporary values on your scanlinerender sample values, <br /> go to the tab called: Scanline sample control. \n<br /><br /><br />\n</font>\n\n<font color='red'>IMPORTANT<br /></font>\n<font color ='#838383'>\nIf you delete the 'disableNode' when nodes is still linked to it,<br />\nyou might have problems rendering on a farm since there will be<br />\nexpressions linked to a nonexistent node.<br />\nBest practice is to unlink before you delete the node. <br />\n</font>"}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {26 divline01 l "" +STARTLINE}
 addUserKnob {22 Denoise t "Click this button to select all Denoise-nodes in your nuke script." -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\n\nfor node in nuke.allNodes():\n    if node.Class() == 'OFXuk.co.thefoundry.noisetools.denoise_v100':\n        node.setSelected(True)\n\n\nfor node in nuke.allNodes():\n    if node.Class() == 'Denoise2':\n        node.setSelected(True)"}
 addUserKnob {22 Defocus t "Click this button to select all Defocus-nodes in your nuke script." -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    if node.Class() == 'Defocus':\n        node.setSelected(True)"}
 addUserKnob {22 ZDefous l ZDefocus t "Click this button to select all ZDefocus-nodes in your nuke script." -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    if node.Class() == 'ZDefocus2':\n        node.setSelected(True)"}
 addUserKnob {22 Median t "Click this button to select all Median-nodes in your nuke script." -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    if node.Class() == 'Median':\n        node.setSelected(True)"}
 addUserKnob {22 Grain t "Click this button to select all Grain-nodes in your nuke script.<br /> This includes F_ReGrain (Furnace regrain)" -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    if node.Class() == 'Grain2' or node.Class() == 'GrainAlexa' or node.Class() == 'FilmgateGrain' or node.Class() == 'FilmgateGrainMasked' or node.Class() == 'OFXuk.co.thefoundry.furnace.f_regrain_v403':\n        node.setSelected(True)"}
 addUserKnob {22 MotionBlur t "Click this button to select all MotionBlur2D and MotionBlur3D-nodes in your nuke script." -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    if (node.Class() == 'MotionBlur' or node.Class() == 'MotionBlur2D' or node.Class() == 'MotionBlur3D'):\n        node.setSelected(True)"}
 addUserKnob {22 RotoPaint t "Click this button to select all RotoPaint-nodes in your nuke script." T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    if node.Class() == 'RotoPaint':\n        node.setSelected(True)" +STARTLINE}
 addUserKnob {22 IDistort t "Click this button to select all IDistort-nodes in your nuke script." -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    if node.Class() == 'IDistort':\n        node.setSelected(True)"}
 addUserKnob {22 GridSplineWarp l "Grid and Spline Warp" t "Click this button to select all GridWarp and SplineWarp nodes in your nuke script." -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    if node.Class() == 'GridWarp3' or node.Class() == 'SplineWarp3':\n        node.setSelected(True)"}
 addUserKnob {22 Particles t "Click this button to select all Particle-nodes in your nuke script.\n" -STARTLINE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nnuke.toNode(myself).knob(\"selected\").setValue(False)\n\nfor node in nuke.allNodes():\n    particleList = \['Particle']\n    for x in particleList:\n        if x in node.Class():\n            node.setSelected(True)"}
 addUserKnob {26 divline02 l "" +STARTLINE}
 addUserKnob {22 LinkSelected l "<font color='#ffffff'>Link Selected Nodes" t "Click this button to link all selected nodes." T "me = nuke.thisNode()\nmyName = nuke.thisNode().name()\nknobs = me.knobs()\n\nfor s in nuke.root().begin().selectedNodes():\n    s\['disable'].setExpression('parent.' + myName +'.disable')\n\nnuke.root().begin()\nnuke.toNode(myName)\['disable'].clearAnimated()" +STARTLINE}
 addUserKnob {22 Unlink l "<font color='#ffffff'>Unlink All Nodes" t "Click this button to unlink all linked nodes." -STARTLINE T "me = nuke.thisNode()\nmyName = nuke.thisNode().name()\n\nnuke.root().begin()\n\nnode = nuke.toNode(myName)\n\ndep = node.dependent(nuke.EXPRESSIONS)\nfor i in dep:\n    i\['disable'].clearAnimated()\n    i\['disable'].setValue(False)\n\nnode\['disable'].setValue(False)\nnode.knob(\"tile_color\").setValue(000000)\n\nfor each in nuke.allNodes(): \n    each.knob(\"selected\").setValue(False)"}
 addUserKnob {22 EnableNodes l "<font color='light green'> Enable / Disable Nodes" t "Click here to toggle between disabled and enabled nodes\n" -STARTLINE T "me = nuke.thisNode()\nmeName = nuke.thisNode().name()\nknobs = me.knobs()\n\nnuke.root().begin()\n\nnode = nuke.toNode(meName)\n\nif node.knob('disable').value() == (True):\n    node.knob('disable').setValue(False)\nelif node.knob('disable').value() == (False):\n    node.knob('disable').setValue(True)\n\n\nif node.knob('disable').value() == (True):\n    node.knob(\"tile_color\").setValue(0xbf0f00ff)\nelif node.knob('disable').value() == (False):\n    node.knob(\"tile_color\").setValue(000000)\n\n"}
 addUserKnob {22 resetSel l "<font color='light green'>Reset selections" t "Click this button to reset selections" -STARTLINE T "nuke.root().begin()\n\nfor each in nuke.allNodes(): \n    each.knob(\"selected\").setValue(False)"}
 addUserKnob {26 divline03 l "" +STARTLINE}
 addUserKnob {20 Admin l INVISIBLE +INVISIBLE n 1}
 addUserKnob {26 InfoPy l INVISIBLE +INVISIBLE T "This is the python code to check the class name of a selected node\n(if you want to add more buttons for selecting nodes):\n\nclassName = nuke.selectedNode()\nprint 'the selected node has a this class name: ' + className.Class()"}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 copyright l "" +STARTLINE T "<font color='#434343'>// fxT_disableNodes v1.9 Â© Tor Andreassen - www.fxtor.net\n</font>"}
 addUserKnob {20 ScanlineRenderSamples l "Scanline samples control"}
 addUserKnob {26 text l "" -STARTLINE T "Save/Delete sample-values:"}
 addUserKnob {22 storeCustomValues l "Store sample-values" t "Click this button to store all the current sample-values of all the ScanlineRender nodes." -STARTLINE T "me = nuke.thisNode()\nmeName = nuke.thisNode().name()\n\nnuke.root().begin()\n\n\nif len(nuke.allNodes(\"ScanlineRender\")) != 0:\n\n    x = 0\n\n    userPick = nuke.toNode(meName)\['chooseScanlineSamples'].value()\n\n    for node in nuke.allNodes():\n        if node.Class() == 'ScanlineRender':\n            name = node.name()\n            CustomSamples = \{\}\n\n            CustomSamples\[name]=node\['samples'].value()\n            print CustomSamples\n\n            if not (me.knob(name+'_samples')):\n                knob = nuke.String_Knob(str(name)+'_samples', str(name))\n                me.addKnob(knob)\n                knob.setValue(str(CustomSamples\[name]))\n                x = 1\n\n    if x == 0:\n        nuke.critical(\"You have already stored your custom scanline sample values\\n If you wish to store new values, please start over by clicking the 'Reset Scanline-samples' button\")\n\nelse:\n    nuke.message(\"No ScanlineRender nodes found, this function is only designed to work with scanlineRender nodes\")"}
 addUserKnob {22 resetKnobs l "Reset Scanline-samples" t "Click this button to remove all saved ScanlineRender-samle values.\nThis will also restore your Custom sample values to all your ScanlineRender nodes." -STARTLINE T "me = nuke.thisNode()\nknobs = me.knobs()\n\nnuke.root().begin()\n\nx = 0\n\nfor knobName in knobs:\n    if knobName.endswith('samples'):\n        myKnobName = knobs\[knobName].name()\n        myKnobVal = knobs\[knobName].value()\n\n        new = myKnobName\[:-8]\n        print new\n\n        if nuke.exists(new):\n            nuke.toNode(new)\['samples'].setValue(float(myKnobVal))\n\n        me.removeKnob(me\[myKnobName])\n        \n        x = 1;\n    \nif x == 0:\n    nuke.message ('No saved knobs to delete')"}
 addUserKnob {4 chooseScanlineSamples l "Choose scanline samples:" t "This is the Scanline sample value type that is set in your Scanline nodes when you click the geeen 'Set Scanline-sample values'-button.\n\nLow samples: This is the temporary value of 1.\nCustom samples: This is the scanline-sample values that you have stored by clicking the 'Store sample-values' button.\n" M {"Low samples" "Custom samples" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {22 run l "<font color =\"light green\">Set Scanline-sample values" t "Set the sample values of all your ScanlineRender nodes.\n\nChoose from the dropdown list if you want to set low samples or if you want you set your custom stored values.\n" -STARTLINE T "me = nuke.thisNode()\nmeName = nuke.thisNode().name()\n\nnuke.root().begin()\n\nuserPick = nuke.toNode(meName)\['chooseScanlineSamples'].value()\n\nknobs = me.knobs()\nx = 0\n\nfor knobName in knobs:\n    if knobName.endswith('samples'):\n        print knobName\n        x = 1\n\nif (x == 0):\n    nuke.message ('You have not stored any custom Scanline sample-values yet.\\n\\nPlease store these before you set any temporary scanline-sample values')\n    print x\n\nelse:\n    print ('userPick is currently set to: ') + userPick\n    for node in nuke.allNodes():\n        if node.Class() == 'ScanlineRender':\n            name = node.name()\n            xt = me\[name+'_samples'].value()\n\n            if userPick == 'Custom samples':\n                node\['samples'].setValue(float(xt))\n            elif userPick == 'Low samples':\n                node\['samples'].setValue(1)"}
 addUserKnob {22 userPick l INVISIBLE t "pybutton to check what knob is picked" -STARTLINE +INVISIBLE T "myself = nuke.thisNode().name()\nnuke.root().begin()\n\nval = nuke.toNode(myself).knob(\"chooseScanlineSamples\").value()\nprint val"}
 addUserKnob {26 divline04 l "" +STARTLINE}
 addUserKnob {20 HowToInfo2 l "How-To Info" n 1}
 HowToInfo2 0
 addUserKnob {26 howToScanlineValues l "" +STARTLINE T "<font color=\"#838383\" >1) Click the 'Store sample-values' buttom to store all the current sample<br /> values from all your ScanlineRender nodes.<br /><br />\n\n2) Select what type of samples value you want to use in the dropdown list<br /> (low samples is the temporary value of 1, custom is your stored values).<br /><br />\n\n3) Click the 'Set Scanline-samples values' button replaces the sample-value<br /> in all the ScanlineRender nodes.<br /><br />\n\n4)Click the 'Reset Scanline-samples' button to start over, <br />this will remove the stored values and reset all sample values to the stored value.<br /><br />\n</font>"}
 addUserKnob {20 endGroup_2 l endGroup n -1}
 addUserKnob {26 divline05 l "" +STARTLINE}
}
 Output {
  inputs 0
  name Output1
  xpos -33
  ypos 286
 }
end_group
